#!/usr/bin/ruby

func fib(n) {
    n <= 1 ? n : fib(n-1)+fib(n-2)
}

say fib(12)

func fac(n) {
    n == 0 ? 1 : n*fac(n-1)
}

say fac(5)

say 3**4;
say 3^5;

var (x, z) = (42, 32)
say x-2;
say z;

say sqrt(2)
say 0.5
say 10/3;

#say add(1,2,3);
#say mul(2,3,4);
#say pow(2, 3);

say 5!;

var x = 42;
say x;
x += 2;
say x;
x //= 5;        #/
say x;
print("a")
print("b")
say ''

x **= 2
say x;

var arr = [123,99,42];

say arr[2]
arr[2] = 7;
say arr[1];
say arr[2];

var h = Hash(a => 1, b => 2);
say h{:a}
say h{:b}
h{:c} = 42
say h{:c}

var a = Array(1,2,3)
say a
say a[1]
a[2] = 42;

#!/usr/bin/ruby

func cuboid (x=1,y=1,z=1,s=' ',c='+',h='-',v='|',d='/') {

    #say("cuboid %d %d %d:" % [x, y, z]);
    ' ' * z+1 + c + h*x + c -> say;

    { |i|
        ' ' * (z - i + 1) + d + s*x + d +
              (s * (i - (i > y ? i-y : 1))) +
              (i - 1 == y ? c : (i > y ? d : v)) -> say
    } * z;

    c + h*x + c + (s * (z < y ? z : y) +
        (z < y ? v : (z == y ? c : d))) -> say;

    { |i|
        v + s*x + v + (z > y
            ? (i >= z ? (s*x + c) : (s * y-i + d))
            : (y - i > z
                ? (s * z + v)
                : (s * y-i + (y-i == z ? c : d))
               )
        ) -> say;
    } * y;

    c + h*x + c -> say;
};

cuboid(2, 3, 4);
cuboid(1, 1, 1);
cuboid(6, 2, 1);
cuboid(2, 4, 1);

say true;
say false;

func lev(s, t) {

    s.is_empty && return t.len;
    t.is_empty && return s.len;

    var s1 = s.ft(1);
    var t1 = t.ft(1);

    s[0] == t[0] ? lev(s1, t1)
                 : 1+min(
                        lev(s1, t1),
                        lev(s,  t1),
                        lev(s1, t )
                     );
}

say lev(%c"abcz", %c"aecd");        # prints: 2

for i in range(1, 10, 2) {
    say i
}

if (1 > 2) {
    say "if"
}
elsif (2 > 1) {
    say "elsif"
    say "bau"
}
else {
    say "else"
}

var i = 197;
while (i < 200) {
    say "while(): #{i}";
    i += 1
}

for i in [100, 101, 102] {
    say "for i in(): #{i}"
}

for ([42,43,44]) { |i|
    say "for(): #{i}";
}

foreach ([42,43,44]) { |i|
    say "foreach(): #{i}";
}

#for ((var i = 0, var j = 42); i <= 6; (i+=2, j+=1)) {
#    say "for(;;): #{i}";
#    say "for(;;): #{j}";
#}


#
## Array `grep` and `map`
#

var arr = [1,2,3,4,5,5,6,6,7,7]

say arr.grep{ _ % 2 == 0 }.join
say arr.map{|i| i**2 }.join(' ')

#
## Mutual recursion
#

func F {};
func M {};

F = func(n) { n > 0 ? (n - M(F(n-1))) : 1 };
M = func(n) { n > 0 ? (n - F(M(n-1))) : 0 };

[F, M].each { |seq|
    (0..19).map {|i| seq.call(i)}.join(' ').say;
}


#
## Anonymous function
#

{ |i|
    say func (n) {
        n < 2 ? n
              : (__FUNC__(n-2) + __FUNC__(n-1));
    }(i)
} * 10;


#
## Man or boy test
#

do {
    func a(k, x1, x2, x3, x4, x5) {
        func b { a(--k, b, x1, x2, x3, x4) }
        k <= 0 ? (x4() + x5()) : b();
    }

    var v = a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});

    if (v != -67) {
        say "MAN-OR-BOY ERROR!!!"
    }

    say v;
}

#
## Y-combinator
#

do {
    var y = ->(f) {->(g) {g(g)}(->(g) { f(->(*args) {g(g)(args...)})})}

    var fac = ->(f) { ->(n) { n < 2 ? 1 : (n * f(n-1)) } }
    say 10.of { |i| y(fac)(i) }

    var fib = ->(f) { ->(n) { n < 2 ? n : (f(n-2) + f(n-1)) } }
    say 10.of { |i| y(fib)(i) }
}

#
## Pythagorean means
#

func A(a) { add(a...) / a.len }
func G(a) { mul(a...) ** 1/a.len }
func H(a) { a.len / add(a.map{1/_}...) }

say("A(1,...,10) = ", A(1..10))
say("G(1,...,10) = ", G(1..10))
say("H(1,...,10) = ", H(1..10))
